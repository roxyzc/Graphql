scalar Date

enum STATUS {
  ERROR
  OK
}

enum ROLE {
  USER
  ADMIN
}

type User {
  userId: String!
  username: String!
  email: String!
  password: String
  role: ROLE!
  createdAt: Date
  updatedAt: Date
}

type Users {
  data: [User]!
}

type Status {
  status: STATUS!
  message: String!
}

type Token {
  accessToken: String
  refreshToken: String
}

union Result = User | Status | Users | Token

type Query {
  dataUsers: Result
  dataUser(id: String): Result
}

type Mutation {
  register(username: String!, email: String!, password: String!): Result
  login(usernameOrEmail: String!, password: String!): Result
  refreshToken(token: String): Result
}
