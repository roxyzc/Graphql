scalar Date

enum STATUS {
  ERROR
  OK
}

enum STATUS_DIARY {
  PUBLIC
  PRIVATE
}

enum ROLE {
  USER
  ADMIN
}

type User {
  userId: String!
  username: String!
  email: String!
  password: String
  role: ROLE!
  createdAt: Date
  updatedAt: Date
}

type Users {
  data: [User]!
}

type Diary {
  diaryId: String!
  status_diary: STATUS_DIARY!
  title: String!
  content: String!
}

type Diaries {
  data: [Diary]!
}

type Status {
  status: STATUS!
  message: String!
}

type Token {
  accessToken: String
  refreshToken: String
}

union Result = User | Users | Diary | Diaries | Status | Token

type Query {
  dataUsers: Result
  dataUser(id: String): Result
  getDiariesByUserId: Result
  getDiaries: Result
  getDiary(id: String): Result
}

type Mutation {
  register(username: String!, email: String!, password: String!): Result
  verifyUser(otp: String!): Status
  login(usernameOrEmail: String!, password: String!): Result
  refreshToken(token: String): Result
  takeTheOtpAgain(usernameOrEmail: String!): Status
  addDiary(status_diary: STATUS_DIARY!, title: String!, content: String!): Result
  updateDiary(diaryId: String!, status_diary: STATUS_DIARY!, title: String!, content: String!): Result
  deleteDiary(diaryId: String!): Result
}
